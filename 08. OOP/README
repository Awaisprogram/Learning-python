
## 🔥 Object-Oriented Programming (OOP) in Python

### 1. 🎯 OOP Goals

* ✅ **Reduce Redundancy**
* 🔁 **Increase Reusability**

---

### 2. 🧱 Classes and Objects

* A **class** is a blueprint that defines what attributes and behaviors an object will have.
* An **object** is an instance of a class.

```python
class Car:
    def __init__(self, brand, color):
        self.brand = brand
        self.color = color

car1 = Car("Toyota", "Red")
```

---

### 3. 🛠️ The Constructor: `__init__()`

* Automatically runs when an object is created.
* `self` refers to the **current object instance**.

```python
def __init__(self, name):
    self.name = name
```

---

### 4. 🧾 Class Attributes & Methods

* **Attributes** = variables that hold data (e.g., `self.name`)
* **Methods** = functions that belong to a class

```python
class Student:
    college = "ABC University"  # class attribute

    def show_details(self):
        print(f"{self.name} studies at {Student.college}")
```

---

### 5. 📌 Static Methods

* Don’t need access to instance (`self`) or class (`cls`)
* Use `@staticmethod` decorator

```python
class Math:
    @staticmethod
    def add(a, b):
        return a + b
```

---

### 6. 🧱 Pillars of OOP

1. **Abstraction** – Hide complexity, show only essentials
2. **Encapsulation** – Wrap data and methods into one unit
3. **Inheritance** – Reuse code across classes
4. **Polymorphism** – Use the same method in different ways

---

### 7. 🔄 Inheritance

* Allows a class to **inherit attributes and methods** from another class

```python
class Employee:
    def show(self):
        print("I am an employee")

class Programmer(Employee):
    def show_language(self):
        print("I write code")
```

---

### 8. 🧬 Types of Inheritance

#### ✅ Single Inheritance

```python
class A:
    pass

class B(A):
    pass
```

#### ✅ Multiple Inheritance

```python
class A:
    pass

class B:
    pass

class C(A, B):
    pass
```

#### ✅ Multilevel Inheritance

```python
class A:
    pass

class B(A):
    pass

class C(B):
    pass
```

---

### 9. 🧓 `super()` Method

* Used to call the **parent class constructor** or methods

```python
class A:
    def __init__(self):
        print("A constructor")

class B(A):
    def __init__(self):
        super().__init__()
        print("B constructor")
```

---

### 10. 🏷️ Class Method

* Works with class variables
* Uses `@classmethod` decorator and `cls` parameter

```python
class School:
    school_name = "ABC School"

    @classmethod
    def change_school(cls, name):
        cls.school_name = name
```

---

### 11. 🧩 Property Decorator

* Turn a method into a **read-only attribute**

```python
class Person:
    def __init__(self, age):
        self._age = age

    @property
    def age(self):
        return self._age
```

---

### 12. ➕ Operator Overloading

* Customize operators for your classes using **dunder methods**

```python
class Vector:
    def __init__(self, x):
        self.x = x

    def __add__(self, other):
        return Vector(self.x + other.x)

v1 = Vector(2)
v2 = Vector(3)
v3 = v1 + v2  # Uses __add__
```

---

