

# 🔥 Object-Oriented Programming (OOP) in Python

## 1. 🎯 Goals of OOP

* ✅ **Reduce Redundancy**
* 🔁 **Increase Reusability**

---

## 2. 🧱 Class & Object

* A **class** is a blueprint that defines the structure and behavior of objects.
* An **object** is an instance of a class.

```python
class Car:
    def __init__(self, brand, color):
        self.brand = brand
        self.color = color

car1 = Car("Toyota", "Red")
```

---

## 3. 🛠️ Constructor `__init__()`

* Automatically called when an object is created.
* `self` refers to the current object instance.

```python
class Person:
    def __init__(self, name):
        self.name = name
```

---

## 4. 📦 Attributes & Methods

* **Attributes** are variables that store data in a class.
* **Methods** are functions defined inside a class.

```python
class Student:
    college = "ABC University"  # Class attribute

    def __init__(self, name):
        self.name = name          # Instance attribute

    def show_details(self):
        print(f"{self.name} studies at {Student.college}")
```

---

## 5. ⚙️ Types of Methods

### ✅ Instance Method

* Takes `self` as the first parameter.
* Can access and modify object attributes.

### ✅ Class Method

* Takes `cls` as the first parameter.
* Can access and modify class variables.
* Use `@classmethod` decorator.

```python
class School:
    name = "ABC School"

    @classmethod
    def change_name(cls, new_name):
        cls.name = new_name
```

### ✅ Static Method

* Doesn’t take `self` or `cls`.
* Used for utility tasks.
* Use `@staticmethod` decorator.

```python
class Math:
    @staticmethod
    def add(a, b):
        return a + b
```

---

## 6. 👑 Pillars of OOP

1. **Abstraction** – Hide complex logic, show only essentials.
2. **Encapsulation** – Bind data and methods into one unit.
3. **Inheritance** – Reuse code by deriving from existing classes.
4. **Polymorphism** – Same function/operator behaves differently in different contexts.

```python
print(1 + 2)                # 3
print("Hello" + "World")    # HelloWorld
print([1, 2] + [3, 4])       # [1, 2, 3, 4]
```

---

## 7. 🔄 Inheritance

### 🧬 Single Inheritance

```python
class Parent:
    pass

class Child(Parent):
    pass
```

### 🧬 Multiple Inheritance

```python
class A:
    pass

class B:
    pass

class C(A, B):
    pass
```

### 🧬 Multilevel Inheritance

```python
class A:
    pass

class B(A):
    pass

class C(B):
    pass
```

---

## 8. 🧓 `super()` Method

* Used to call parent class constructor or methods.

```python
class A:
    def __init__(self):
        print("Constructor A")

class B(A):
    def __init__(self):
        super().__init__()
        print("Constructor B")
```

---

## 9. 🔒 Private Attributes & Methods

* Prefix with `_` or `__` to make it private (conventionally).
* Used to restrict direct access.

```python
class Test:
    def __init__(self):
        self.__secret = "hidden"

    def get_secret(self):
        return self.__secret
```

---

## 10. 🏷️ Property Decorator

* Used to make methods act like read-only attributes.

```python
class Person:
    def __init__(self, age):
        self._age = age

    @property
    def age(self):
        return self._age
```

---

## 11. ➕ Operator Overloading

* Customize how operators work for user-defined classes.

```python
class Vector:
    def __init__(self, x):
        self.x = x

    def __add__(self, other):
        return Vector(self.x + other.x)

v1 = Vector(2)
v2 = Vector(3)
v3 = v1 + v2
```

---

## 12. 🗑️ `del` Keyword

* Used to delete object attributes or the object itself.

```python
del obj.attribute
del obj
```


