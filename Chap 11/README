# Inheritance

# Creating a  new class using an existing class

class Employee:
  company = "Karachi"

  def showSelf(self):
    print(f"The name of Employee is {self.name} and his salary is {self.salary}")


# We can use simply this code but if we wanna change the code later , we could face erros and have to change in every line, but inheritance allows programers to write code once and use multiple times

"""
class Programmer:
  company = "Karachi University"

  def showSelf(self):
    print(f"The name of Programmer is {self.name} and his salary is {self.salary}")
   
  def showLanguage(self):
    print(f"The name of Programmer is {self.name} and his salary is {self.salary}")
"""

# Inherited Class

class Programmer(Employee):
  company = "Karachi University"

  def showLanguage(self):
    print(f"The name of Programmer is {self.name} and his salary is {self.salary}")    

a = Employee()
b = Programmer()

print(a.company, b.company)


# Types of Inheritance

"""
1. Single Inheritance
2. Multiple Inheritance
3. Multilevel Inheritance
"""

# 1. Single Inheritance

"""
Single inheritance occurs when child class inherits only a single parent class
        Base ->   Derived
        
"""

# 2. Multiple Inheritance


"""
Multiple inheritance occurs when child class inherits from more than one parent class
        Parent1 + Parent2  ->   Child
        
"""    

# 3. Multilevel Inheritance

"""
When a child class becomes a parent from another child class
        Parent   ->  Child1  ->   Child2 
"""



# Super Method
"""
super().__init__()

Run the constructor of its parent

"""

# Class Method

"""
We can  directly use class attribute by using this decrator. 
A class method is a method which is bound to class and not the object of the class
Self is the object in which mehthod is running
"""
# Property Decorator


# Operators overloading
"""

operators in python can be overloaded using dunder methods
There methods are called when a given operator is used on objects 
"""
